#!/bin/bash

formatter='stylish-haskell | brittany'
tmp='.git/.tmp'

function echo_note {
  tput setaf 6
  echo $1
  tput sgr0
}

function echo_err {
  tput bold
  tput setaf 1
  echo $1
  tput sgr0
}

exec < /dev/tty

# check that there are no unstaged haskell files
echo_note "Checking for unstaged haskell files"
git status --porcelain | grep -E "^( M|MM|\?\?).*\.hs"
if [ $? -eq 0 ]
then
  echo_err \
    "Aborting commit: stage all haskell files before running pre-commit tests"
  exit 1
fi

# check that all haskell files are formatted
if [ "$HOSTNAME" = stargazer ]
then
  echo_note 'Checking the formatting of your haskell files'
  for l in `find app -name *.hs`
  do
    echo "checking $l"
    eval "cat $l | $formatter > $tmp"
    diff --color $l $tmp
    if [ $? -ne 0 ]
    then
      echo    "It looks like $l in not properly formatted."
      echo -n 'Run the autoformatter? [Y/n] '
      read
      if ! [[ "$REPLY" =~ ^[nN] ]]
      then
        mv $tmp $l
        git add $l
      else
        rm $tmp
        echo_err 'Aborting commit: improperly formatted file.'
        exit 1
      fi
    fi
  done
fi

# run tests
echo_note "Running property tests"
rm `find . -name *.tix`
unbuffer cabal new-test --test-show-details=direct | tee $tmp
grep -q "Failed!" < $tmp
if [ $? -eq 0 ]
then
  echo_err "Aborting commit: tests failed"
  rm $tmp
  exit 1
fi
grep -q "tests: FAIL" < $tmp
if [ $? -eq 0 ]
then
  echo_err "Aborting commit: tests failed"
  rm $tmp
  exit 1
fi
rm $tmp

# copy coverage report
for l in `find . -wholename *haskeil-tests/*.html`
do
  mv $l coverage/
done
git add coverage/*.html
printf "# Haskeil\n## Coverage\n" > README.md
hooks/coverage.pl < coverage/hpc_index.html >> README.md
git add README.md

# attempt to compile main executable
echo_note "Checking that main compiles"
cabal build
